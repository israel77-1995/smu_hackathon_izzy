version: '3.8'

services:
  # Mobile Spo Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: mobile-spo-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=${DATABASE_URL}
      - REDIS_URL=${REDIS_URL}
      - JWT_SECRET=${JWT_SECRET}
      - HEALTH_DATA_ENCRYPTION_KEY=${HEALTH_DATA_ENCRYPTION_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - SMS_PROVIDER_API_KEY=${SMS_PROVIDER_API_KEY}
      - EMAIL_PROVIDER_API_KEY=${EMAIL_PROVIDER_API_KEY}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
      - SESSION_SECRET=${SESSION_SECRET}
      - PII_SALT=${PII_SALT}
    ports:
      - "3001:3001"
    depends_on:
      - mongodb
      - redis
    networks:
      - mobile-spo-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: mobile-spo-mongodb
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=mobile_spo
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongodb/init:/docker-entrypoint-initdb.d
    networks:
      - mobile-spo-network
    command: mongod --auth --bind_ip_all

  # Redis for Session Management and Caching
  redis:
    image: redis:7.2-alpine
    container_name: mobile-spo-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mobile-spo-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: mobile-spo-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - backend
    networks:
      - mobile-spo-network

  # Prometheus for Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: mobile-spo-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - mobile-spo-network

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: mobile-spo-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - mobile-spo-network

  # ELK Stack for Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: mobile-spo-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - mobile-spo-network

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: mobile-spo-logstash
    restart: unless-stopped
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline
      - ./logs:/usr/share/logstash/logs
    ports:
      - "5044:5044"
    environment:
      - "LS_JAVA_OPTS=-Xmx256m -Xms256m"
    depends_on:
      - elasticsearch
    networks:
      - mobile-spo-network

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: mobile-spo-kibana
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - mobile-spo-network

  # Health Check Service
  healthcheck:
    image: alpine/curl
    container_name: mobile-spo-healthcheck
    restart: unless-stopped
    command: >
      sh -c "
        while true; do
          curl -f http://backend:3001/health || echo 'Backend health check failed';
          curl -f http://nginx:80/health || echo 'Nginx health check failed';
          sleep 60;
        done
      "
    depends_on:
      - backend
      - nginx
    networks:
      - mobile-spo-network

  # Backup Service
  backup:
    image: mongo:7.0
    container_name: mobile-spo-backup
    restart: "no"
    environment:
      - MONGO_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh
    command: /backup.sh
    depends_on:
      - mongodb
    networks:
      - mobile-spo-network

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  mobile-spo-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
